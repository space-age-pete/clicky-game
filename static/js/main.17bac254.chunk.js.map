{"version":3,"sources":["components/Card.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","style","onClick","id","Header","score","hiScore","App","state","IDsGuessed","allBlocks","shuffle","i","length","j","Math","floor","random","_ref","fillCards","blockArray","blocks","map","block","components_Card","src","image","key","_this","clickHandler","setState","event","target","includes","hScore","Object","toConsumableArray","concat","this","components_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAUeA,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAOL,EAAMK,MAAOC,QAASN,EAAMM,QAASC,GAAIP,EAAMO,QCOjEC,EATA,SAAAR,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMS,MAAlB,KACAR,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMU,mBCuDdC,6MArDbC,MAAQ,CACNH,MAAO,EACPC,QAAS,EACTG,WAAY,GACZC,UAAW,MAObC,QAAU,SAACb,GACT,IAAK,IAAIc,EAAId,EAAEe,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADLM,EAEtB,CAACpB,EAAEgB,GAAIhB,EAAEc,IAAvBd,EAAEc,GAFkCM,EAAA,GAE9BpB,EAAEgB,GAF4BI,EAAA,GAIvC,OAAOpB,KAGTqB,UAAY,WACV,IAAIC,EAAaC,EAAOC,IAAI,SAAAC,GAAK,OAAI1B,EAAAC,EAAAC,cAACyB,EAAD,CAAMC,IAAKF,EAAMG,MAAOzB,MAAOsB,EAAMtB,MAAO0B,IAAKJ,EAAMpB,GAAIA,GAAIoB,EAAMpB,GAAID,QAAS0B,EAAKC,iBAC5HT,EAAaQ,EAAKjB,QAAQS,GAC1BQ,EAAKE,SAAS,CAAEpB,UAAWU,OAG7BS,aAAe,SAAAE,GACb,IAAM5B,EAAK4B,EAAMC,OAAO7B,GACxB,GAAKyB,EAAKpB,MAAMC,WAAWwB,SAAS9B,GAQlCyB,EAAKE,SAAS,CAAEzB,MAAO,EAAGI,WAAY,SARC,CACvC,IAAIyB,EAASN,EAAKpB,MAAMH,MAAQ,EAAIuB,EAAKpB,MAAMF,QAAUsB,EAAKpB,MAAMH,MAAQ,EAAIuB,EAAKpB,MAAMF,QAC3FsB,EAAKE,SAAS,CAAEzB,MAAOuB,EAAKpB,MAAMH,MAAQ,EAAGI,WAAW0B,OAAAC,EAAA,EAAAD,CAAKP,EAAKpB,MAAMC,YAAjB4B,OAAA,CAA6BlC,IAAKG,QAAS4B,IAE9FN,EAAKpB,MAAMH,MAAQuB,EAAKpB,MAAMF,SAASsB,EAAKE,SAAS,CAAExB,QAASsB,EAAKpB,MAAMH,QAOjFuB,EAAKT,gGA9BLmB,KAAKnB,6CAkCL,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CAAQlC,MAAOiC,KAAK9B,MAAMH,MAAOC,QAASgC,KAAK9B,MAAMF,UACrDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZsC,KAAK9B,MAAME,mBAhDJ8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17bac254.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => (\n  <div>\n    <div className=\"card\" style={props.style} onClick={props.onClick} id={props.id}>\n      {/* <img className=\"card-img-top\" src={props.src} alt=\"Card cap\" /> */}\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\n\nconst Header = props => (\n  <div>\n    <nav className=\"navbar navbar-dark\">\n      <h3>Score: {props.score} </h3>\n      <h3>High Score: {props.hiScore}</h3>\n    </nav>\n  </div>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport blocks from \"./blocks.json\";\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    hiScore: 0,\n    IDsGuessed: [],\n    allBlocks: []\n  };\n\n  componentDidMount() {\n    this.fillCards();\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  fillCards = () => {\n    let blockArray = blocks.map(block => <Card src={block.image} style={block.style} key={block.id} id={block.id} onClick={this.clickHandler} />);\n    blockArray = this.shuffle(blockArray);\n    this.setState({ allBlocks: blockArray });\n  }\n\n  clickHandler = event => {\n    const id = event.target.id;\n    if (!this.state.IDsGuessed.includes(id)) {\n      let hScore = this.state.score + 1 > this.state.hiScore ? this.state.score + 1 : this.state.hiScore;\n      this.setState({ score: this.state.score + 1, IDsGuessed: [...this.state.IDsGuessed, id], hiScore: hScore })\n\n      if (this.state.score > this.state.hiScore) this.setState({ hiScore: this.state.score });\n\n    }\n    else {\n      this.setState({ score: 0, IDsGuessed: [] })\n    }\n\n    this.fillCards();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} hiScore={this.state.hiScore} />\n        <div className=\"cardContainer\">\n          {this.state.allBlocks}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//\"https://i.pinimg.com/originals/ce/76/97/ce7697f4a359b8c2768074cdf24b4cd6.gif\\\"\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}